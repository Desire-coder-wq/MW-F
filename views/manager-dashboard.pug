doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1")
    title Manager Dashboard - MWF
    link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css")
    link(href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css", rel="stylesheet")
    link(rel="stylesheet", href="/css/attendant-manage.css")
    script(src="/socket.io/socket.io.js")
    style.
      .notification-container {
        position: relative;
        margin-right: 15px;
      }
      .notification-bell {
        color: #6c757d;
        text-decoration: none;
        border: none;
        background: none;
        padding: 0.5rem;
        position: relative;
      }
      .notification-bell:hover {
        color: #495057;
      }
      .notification-dropdown {
        width: 400px;
        max-height: 500px;
        overflow-y: auto;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        border: 1px solid #e1e5e9;
      }
      .notification-item {
        padding: 12px 15px;
        border-bottom: 1px solid #f1f3f4;
        transition: background-color 0.2s ease;
      }
      .notification-item.unread {
        background-color: #f0f7ff;
        border-left: 3px solid #3498db;
      }
      .notification-item.read {
        opacity: 0.7;
      }
      .notification-item:hover {
        background-color: #f8f9fa;
      }
      .notification-content p {
        margin: 0;
        font-size: 0.9rem;
      }
      .mark-read-btn {
        padding: 2px 6px;
        font-size: 0.7rem;
      }
      .profile-pic {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
        border: 2px solid #ddd;
        cursor: pointer;
      }
      .notification-icon {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
        margin-right: 10px;
      }
      .notification-icon.priority-urgent { background: #fee2e2; color: #dc2626; }
      .notification-icon.priority-high { background: #fef3c7; color: #d97706; }
      .notification-icon.priority-medium { background: #dbeafe; color: #2563eb; }
      .notification-icon.priority-low { background: #f3f4f6; color: #6b7280; }

  body
    .layout
      // Sidebar
      aside.sidebar
        .sidebar-toggle
          i.fas.fa-bars
        .logo-container
          img.logo-img(src="/images/logo 2.png", alt="MWF Logo")
          .logo-text Mayondo Wood & Furniture
        nav
          ul
            li
              a(href="/reports")
                i.fas.fa-chart-bar
                span Reports
            li
              a(href="/approve-stock")
                i.fas.fa-check-circle
                span Approve Stock
            li
              a(href="/stock")
                i.fas.fa-boxes
                span Add Stock
            li
              a(href="/sales-report")
                i.fas.fa-chart-line
                span Sales Reports
            li
              a(href="/attendants")
                i.fas.fa-users
                span Attendants
            li
              a(href="/loading/pending")
                i.fas.fa-clock
                span Pending Sales

            li
              a(href="/logout")
                i.fas.fa-sign-out-alt
                span Logout

      // Topbar
      #topbar
        .header-content
          .company-info
            h1 Manager Dashboard
            h3 Manage your team and operations
          .header-actions
            // Notification Dropdown
            .notification-container
              button.notification-bell#notificationBell
                i.fas.fa-bell
                if unreadCount > 0
                  span.notification-badge(style="position: absolute; top: 0; right: 0; background: red; color: white; border-radius: 50%; width: 18px; height: 18px; font-size: 0.7rem; display: flex; align-items: center; justify-content: center;")= unreadCount
              .dropdown-menu.notification-dropdown#notificationDropdown
                .notification-header(style="padding: 15px; border-bottom: 1px solid #e1e5e9; display: flex; justify-content: space-between; align-items: center;")
                  h5.mb-0 Notifications
                  button.btn.btn-sm.btn-outline-secondary#markAllReadBtn Mark all as read
                .notification-list
                  if notifications && notifications.length > 0
                    each notification in notifications.slice(0, 5)
                      .notification-item(class=notification.status === 'unread' ? 'unread' : 'read')
                        .notification-icon(class=`priority-${notification.priority}`)
                          if notification.type === 'stock_approval'
                            i.fas.fa-boxes
                          else if notification.type === 'pending_sales'
                            i.fas.fa-clock
                          else if notification.type === 'low_stock'
                            i.fas.fa-exclamation-triangle
                          else if notification.type === 'new_sale'
                            i.fas.fa-shopping-cart
                          else
                            i.fas.fa-info-circle
                        .notification-content
                          p
                            strong= notification.title
                          p(style="margin: 5px 0; font-size: 0.8rem;")= notification.message
                          small.text-muted= new Date(notification.createdAt).toLocaleString()
                        if notification.status === 'unread'
                          button.mark-read-btn.btn.btn-sm.btn-outline-success(data-id=notification._id, style="border: none; background: none; color: #28a745;")
                            i.fas.fa-check
                  else
                    .notification-item(style="text-align: center; padding: 20px;")
                      p No notifications

            // User Profile
            .user-profile
              img.profile-pic(
                src=(user && user.profilePic) ? user.profilePic: '/images/default-profile.png',
                alt="Profile Picture",
                onclick="window.location.href='/manager/update-profile'"
              )
              span#managerName= (user && user.name) ? user.name : 'Manager'
              a.update-link(href="/manager/update-profile") Update Profile

      // Main Content
      .container
        .cards
          .card(onclick="window.location.href='/userList'")
            .card-icon
              i.fas.fa-user-friends
            .card-content
              h4 Registered Users
              p View registered users
            .card-action
              button.go-btn Go
          .card(onclick="window.location.href='/sales-list'")
            .card-icon
              i.fas.fa-shopping-cart
            .card-content
              h4 Sales Made
              p View sales made
            .card-action
              button.go-btn Go
          .card(onclick="window.location.href='/reports'")
            .card-icon
              i.fas.fa-chart-pie
            .card-content
              h4 Stock Report
              p View stock
            .card-action
              button.go-btn Go
          .card(onclick="window.location.href='/approve-stock'")
            .card-icon
              i.fas.fa-thumbs-up
            .card-content
              h4 Approve Stock
              p Approve stock submitted by attendants
            .card-action
              button.go-btn Go
          .card(onclick="window.location.href='/stock'")
            .card-icon
              i.fas.fa-plus-square
            .card-content
              h4 Add Stock
              p Record new stock items for sale
            .card-action
              button.go-btn Go
          .card(onclick="window.location.href='/sales-report'")
            .card-icon
              i.fas.fa-file-invoice-dollar
            .card-content
              h4 Sales Report
              p View periodical sales reports
            .card-action
              button.go-btn Go
          .card(onclick="window.location.href='/products'")
            .card-icon
              i.fas.fa-couch
            .card-content
              h4 Finished Furniture
              p View finished products available for sale
            .card-action
              button.go-btn Go
          .card(onclick="window.location.href='/attendants'")
            .card-icon
              i.fas.fa-user-tie
            .card-content
              h4 Attendants
              p View attendants and monitor tasks
            .card-action
              button.go-btn Go
          
          .card(onclick="window.location.href='/loading/report'")
            .card-icon
              i.fas.fa-clipboard-check
            .card-content
              h4 Offloading Reports
              p View offloading activities and reports
            .card-action
              button.go-btn Go
          .card(onclick="window.location.href='/register'")
            .card-icon
              i.fas.fa-user-plus
            .card-content
              h4 Register Users
              p Register users here
            .card-action
              button.go-btn Go
          .card(onclick="window.location.href='/invoices'")
            .card-icon
              i.fas.fa-file-invoice
            .card-content
              h4 Sales Follow-up
              p Track sold products and invoices
            .card-action
              button.go-btn Go
          .card(onclick="window.location.href='/task-reports'")
            .card-icon
              i.fas.fa-clipboard-user
            .card-content
              h4 Task Reports
              p Monitor task completion
            .card-action
              button.go-btn Go
          .card(onclick="window.location.href='/stockList'")
            .card-icon
              i.fas.fa-clipboard-list
            .card-content
              h4 Stock Inventory
              p Check available stock
            .card-action
              button.go-btn Go
          .card(onclick="window.location.href='/customers'")
            .card-icon
              i.fas.fa-users
            .card-content
              h4 View Customers
              p View customer information and history
            .card-action
              button.go-btn Go
          .card(onclick="window.location.href='/suppliers'")
            .card-icon
              i.fas.fa-truck
            .card-content
              h4 View Suppliers
              p View supplier information and orders
            .card-action
              button.go-btn Go
          .card(onclick="window.location.href='/settings'")
            .card-icon
              i.fas.fa-cogs
            .card-content
              h4 System Settings
              p Manage system configuration
            .card-action
              button.go-btn Go
          // New Notification Card - FIXED LINK
          .card(onclick="window.location.href='/notifications'")
            .card-icon
              i.fas.fa-bell
            .card-content
              h4 Notifications
              p View and manage all notifications
            .card-action
              button.go-btn Go

    footer
      .container
         p &copy; 2025 Mayondo Wood & Furniture Ltd 
         p Designed by A Rose Desire @ Groundbreaker Talents

    // Bootstrap JS
    script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js")

    script.
      // Sidebar toggle functionality
      document.addEventListener('DOMContentLoaded', function() {
        const sidebarToggle = document.querySelector('.sidebar-toggle');
        const sidebar = document.querySelector('.sidebar');

        if (sidebarToggle && sidebar) {
          sidebarToggle.addEventListener('click', function() {
            sidebar.classList.toggle('collapsed');
          });
        }

        // Card click handlers
        document.querySelectorAll('.card').forEach(card => {
          card.addEventListener('click', function(e) {
            if (e.target.tagName === 'BUTTON' || e.target.closest('button')) {
              return;
            }
            const onclick = this.getAttribute('onclick');
            if (onclick) {
              window.location.href = onclick.replace("window.location.href='", "").replace("'", "");
            }
          });
        });

        // Notification Bell Functionality
        const notificationBell = document.getElementById('notificationBell');
        const notificationDropdown = document.getElementById('notificationDropdown');
        
        if (notificationBell && notificationDropdown) {
          // Toggle dropdown on bell click
          notificationBell.addEventListener('click', function(e) {
            e.stopPropagation();
            notificationDropdown.classList.toggle('show');
          });

          // Close dropdown when clicking outside
          document.addEventListener('click', function() {
            notificationDropdown.classList.remove('show');
          });

          // Mark as read functionality
          document.querySelectorAll('.mark-read-btn').forEach(button => {
            button.addEventListener('click', function(e) {
              e.stopPropagation();
              const notificationId = this.getAttribute('data-id');
              markAsRead(notificationId, this);
            });
          });

          // Mark all as read
          const markAllBtn = document.getElementById('markAllReadBtn');
          if (markAllBtn) {
            markAllBtn.addEventListener('click', function(e) {
              e.stopPropagation();
              markAllAsRead();
            });
          }
        }

        function markAsRead(notificationId, button) {
          fetch(`/notifications/${notificationId}/read`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            }
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              // Update UI
              const notificationItem = button.closest('.notification-item');
              notificationItem.classList.remove('unread');
              notificationItem.classList.add('read');
              button.remove();
              
              // Update badge count
              updateNotificationBadge();
            }
          })
          .catch(error => console.error('Error:', error));
        }

        function markAllAsRead() {
          fetch('/notifications/mark-all-read', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            }
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              // Update all notifications to read
              document.querySelectorAll('.notification-item.unread').forEach(item => {
                item.classList.remove('unread');
                item.classList.add('read');
                
                // Remove mark as read buttons
                const markReadBtn = item.querySelector('.mark-read-btn');
                if (markReadBtn) markReadBtn.remove();
              });
              
              // Update badge count
              updateNotificationBadge();
            }
          })
          .catch(error => console.error('Error:', error));
        }

        function updateNotificationBadge() {
          const unreadCount = document.querySelectorAll('.notification-item.unread').length;
          const badge = document.querySelector('.notification-badge');
          
          if (badge) {
            if (unreadCount === 0) {
              badge.remove();
            } else {
              badge.textContent = unreadCount;
            }
          }
        }

        // Real-time notifications with Socket.io
        const socket = io();
        
        socket.on('new-notification', function(notification) {
          // Add new notification to the dropdown
          const notificationList = document.querySelector('.notification-list');
          const newNotification = createNotificationElement(notification);
          
          if (notificationList.children.length >= 5) {
            notificationList.removeChild(notificationList.lastChild);
          }
          
          notificationList.insertBefore(newNotification, notificationList.firstChild);
          
          // Update badge
          updateNotificationBadge();
        });

        function createNotificationElement(notification) {
          const div = document.createElement('div');
          div.className = `notification-item ${notification.status === 'unread' ? 'unread' : 'read'}`;
          
          const iconClass = getNotificationIcon(notification.type);
          const priorityClass = `priority-${notification.priority}`;
          
          div.innerHTML = `
            <div class="notification-icon ${priorityClass}">
              <i class="fas ${iconClass}"></i>
            </div>
            <div class="notification-content">
              <p><strong>${notification.title}</strong></p>
              <p style="margin: 5px 0; font-size: 0.8rem;">${notification.message}</p>
              <small class="text-muted">${new Date(notification.createdAt).toLocaleString()}</small>
            </div>
            ${notification.status === 'unread' ? 
              `<button class="mark-read-btn btn btn-sm btn-outline-success" data-id="${notification._id}" style="border: none; background: none; color: #28a745;">
                <i class="fas fa-check"></i>
              </button>` : ''
            }
          `;
          
          return div;
        }

        function getNotificationIcon(type) {
          const icons = {
            'stock_approval': 'fa-boxes',
            'pending_sales': 'fa-clock',
            'low_stock': 'fa-exclamation-triangle',
            'new_sale': 'fa-shopping-cart',
            'task_completed': 'fa-check-circle',
            'offload_request': 'fa-truck-loading'
          };
          return icons[type] || 'fa-info-circle';
        }
      });