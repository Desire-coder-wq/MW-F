//- notification-script.pug
script.
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize Socket.io connection if available
    let socket;
    if (typeof io !== 'undefined') {
      socket = io();
      socket.on('connect', function() {
        console.log('Connected to server');
      });
      
      socket.on('new_notification', function(notification) {
        console.log('New notification received:', notification);
        updateBadgeCount(1);
        addNotificationToDropdown(notification);
      });
    }

    // Load notifications when dropdown is opened
    const notificationDropdown = document.getElementById('notificationDropdown');
    if (notificationDropdown) {
      notificationDropdown.addEventListener('show.bs.dropdown', function() {
        loadNotifications();
      });
    }

    // Load notifications on page load
    loadNotifications();

    function loadNotifications() {
      fetch('/notifications/api')
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            console.log('Notifications loaded:', data.notifications.length);
            renderNotifications(data.notifications);
            updateBadgeCount(data.unreadCount, true);
          }
        })
        .catch(error => {
          console.error('Error loading notifications:', error);
          showErrorState();
        });
    }

    function renderNotifications(notifications) {
      const container = document.getElementById('notificationListContainer');
      if (!container) return;

      if (!notifications || notifications.length === 0) {
        container.innerHTML = '<li><div class="text-center py-3 text-muted">No notifications</div></li>';
        return;
      }

      container.innerHTML = notifications.map(notification => 
        createNotificationHTML(notification)
      ).join('');

      // Add event listeners to mark-read buttons
      container.querySelectorAll('.mark-read-btn').forEach(button => {
        button.addEventListener('click', function(e) {
          e.stopPropagation();
          const notificationId = this.getAttribute('data-id');
          markAsRead(notificationId, this);
        });
      });
    }

    function createNotificationHTML(notification) {
      const isUnread = notification.status === 'unread';
      const priority = notification.priority || 'medium';
      const iconClass = getNotificationIcon(notification.type);
      const actionUrl = notification.actionUrl || '';
      
      return `
        <li>
          <div class="notification-item ${isUnread ? 'unread' : 'read'}" 
               data-id="${notification._id}"
               ${actionUrl ? `onclick="window.location.href='${actionUrl}'" style="cursor: pointer;"` : ''}>
            <div class="d-flex align-items-start">
              <div class="notification-icon priority-${priority}">
                <i class="fas ${iconClass}"></i>
              </div>
              <div class="notification-content flex-grow-1">
                <div class="d-flex justify-content-between align-items-start">
                  <div>
                    <p class="mb-1 fw-bold">${escapeHtml(notification.title)}</p>
                    <p class="mb-1 text-muted">${escapeHtml(notification.message)}</p>
                    <small class="text-muted">${new Date(notification.createdAt).toLocaleString()}</small>
                  </div>
                  ${isUnread ? `
                    <button class="btn btn-sm btn-outline-success mark-read-btn" 
                            data-id="${notification._id}" 
                            onclick="event.stopPropagation()">
                      <i class="fas fa-check"></i>
                    </button>
                  ` : ''}
                </div>
              </div>
            </div>
          </div>
        </li>
      `;
    }

    function getNotificationIcon(type) {
      const icons = {
        'stock_approval': 'fa-boxes',
        'pending_sales': 'fa-truck-loading',
        'offload_request': 'fa-truck-moving',
        'low_stock': 'fa-exclamation-triangle',
        'new_sale': 'fa-shopping-cart',
        'task_completed': 'fa-tasks',
        'stock_approved': 'fa-check-circle',
        'stock_rejected': 'fa-times-circle'
      };
      return icons[type] || 'fa-bell';
    }

    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    function markAsRead(notificationId, button) {
      fetch(`/notifications/${notificationId}/read`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          const notificationItem = button.closest('.notification-item');
          notificationItem.classList.remove('unread');
          notificationItem.classList.add('read');
          button.remove();
          updateBadgeCount(-1);
        }
      })
      .catch(error => console.error('Error:', error));
    }

    // Mark all as read
    const markAllBtn = document.getElementById('markAllRead');
    if (markAllBtn) {
      markAllBtn.addEventListener('click', function(e) {
        e.stopPropagation();
        markAllAsRead();
      });
    }

    function markAllAsRead() {
      fetch('/notifications/mark-all-read', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          document.querySelectorAll('.notification-item.unread').forEach(item => {
            item.classList.remove('unread');
            item.classList.add('read');
          });
          
          document.querySelectorAll('.mark-read-btn').forEach(btn => btn.remove());
          updateBadgeCount(-999);
          
          const markAllBtn = document.getElementById('markAllRead');
          if (markAllBtn) markAllBtn.style.display = 'none';
        }
      })
      .catch(error => console.error('Error:', error));
    }

    function updateBadgeCount(change, setAbsolute = false) {
      const badge = document.getElementById('notificationBadge');
      const badgeCount = badge ? badge.querySelector('.badge-count') : null;
      
      if (!badge || !badgeCount) return;

      let currentCount;
      if (setAbsolute) {
        currentCount = change;
      } else {
        currentCount = parseInt(badgeCount.textContent) || 0;
        currentCount += change;
      }

      if (currentCount <= 0) {
        badge.style.display = 'none';
        const markAllBtn = document.getElementById('markAllRead');
        if (markAllBtn) markAllBtn.style.display = 'none';
      } else {
        badge.style.display = 'block';
        badgeCount.textContent = currentCount;
        const markAllBtn = document.getElementById('markAllRead');
        if (markAllBtn) markAllBtn.style.display = 'block';
      }
    }

    function addNotificationToDropdown(notification) {
      const container = document.getElementById('notificationListContainer');
      if (!container) return;

      const noNotifications = container.querySelector('.text-center.py-3.text-muted');
      if (noNotifications) {
        container.innerHTML = '';
      }

      const newNotificationHTML = createNotificationHTML(notification);
      container.insertAdjacentHTML('afterbegin', newNotificationHTML);

      const newButton = container.querySelector('.mark-read-btn');
      if (newButton) {
        newButton.addEventListener('click', function(e) {
          e.stopPropagation();
          markAsRead(notification._id, this);
        });
      }
    }

    function showErrorState() {
      const container = document.getElementById('notificationListContainer');
      if (container) {
        container.innerHTML = '<li><div class="text-center py-3 text-danger">Failed to load notifications</div></li>';
      }
    }

    // Auto-refresh notifications every 30 seconds
    setInterval(() => {
      loadNotifications();
    }, 30000);
  });